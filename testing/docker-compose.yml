services:
  ansi-color-logs:
    image: alpine
    init: true
    command: >
      sh -c '
        echo -e "\033[31mRED TEXT\033[0m" > /proc/1/fd/1;
        echo -e "\033[32mGREEN TEXT\033[0m" > /proc/1/fd/1;
        echo -e "\033[33mYELLOW TEXT\033[0m" > /proc/1/fd/1;
        echo -e "\033[34mBLUE TEXT\033[0m" > /proc/1/fd/1;
        echo -e "\033[35mMAGENTA TEXT\033[0m" > /proc/1/fd/1;
        echo -e "\033[36mCYAN TEXT\033[0m" > /proc/1/fd/1;
        echo -e "\033[1mBOLD TEXT\033[0m" > /proc/1/fd/1;
        echo -e "\033[4mUNDERLINED TEXT\033[0m" > /proc/1/fd/1;
        echo -e "\033[31mError: \033[0mCould not connect to database" > /proc/1/fd/1;
        echo -e "\033[32mSuccess: \033[0mDatabase connection established" > /proc/1/fd/1;
        echo -e "\033[33mWarning: \033[0mHigh memory usage detected" > /proc/1/fd/1;
        echo -e "\033[34mInfo: \033[0mApplication started successfully" > /proc/1/fd/1;
        echo -e "\033[35mDebug: \033[0mVariable x = 42" > /proc/1/fd/1;
        echo -e "\033[36mTrace: \033[0mFunction call stack: main() -> init() -> load()" > /proc/1/fd/1;
        while true; do
          echo -e "\033[32m[INFO]\033[0m Log entry at $(date)" > /proc/1/fd/1;
          echo -e "\033[33m[WARN]\033[0m Memory usage: $((RANDOM % 100))%" > /proc/1/fd/1;
          echo -e "\033[31m[ERROR]\033[0m Failed to process item #$((RANDOM % 1000))" > /proc/1/fd/1;
          sleep 2;
        done
      '

  high-volume-logs:
    image: alpine
    init: true
    command: >
      sh -c '
        # Application startup logs
        echo "[$(date +"%Y-%m-%d %H:%M:%S.%3N")] [INFO] Application starting up..." > /proc/1/fd/1;
        echo "[$(date +"%Y-%m-%d %H:%M:%S.%3N")] [INFO] Loading configuration from /etc/app/config.yaml" > /proc/1/fd/1;
        echo "[$(date +"%Y-%m-%d %H:%M:%S.%3N")] [INFO] Initializing database connection pools" > /proc/1/fd/1;
        echo "[$(date +"%Y-%m-%d %H:%M:%S.%3N")] [INFO] Connected to primary database (postgres://db:5432)" > /proc/1/fd/1;
        echo "[$(date +"%Y-%m-%d %H:%M:%S.%3N")] [INFO] Connected to cache server (redis://cache:6379)" > /proc/1/fd/1;
        echo "[$(date +"%Y-%m-%d %H:%M:%S.%3N")] [INFO] Starting HTTP server on port 8080" > /proc/1/fd/1;
        echo "[$(date +"%Y-%m-%d %H:%M:%S.%3N")] [INFO] Starting metrics collector" > /proc/1/fd/1;
        echo "[$(date +"%Y-%m-%d %H:%M:%S.%3N")] [INFO] Application started successfully in 1.24s" > /proc/1/fd/1;
        
        # Initial batch of logs (around 3000)
        for i in $(seq 1 3000); do
          user_id=$((1000 + RANDOM % 9000))
          session_id=$(tr -dc "a-f0-9" < /dev/urandom | head -c 16)
          req_id=$(tr -dc "a-f0-9" < /dev/urandom | head -c 8)
          timestamp=$(date +"%Y-%m-%d %H:%M:%S.%3N")
          
          case $((RANDOM % 20)) in
            0)
              echo "[$timestamp] [INFO] [req-$req_id] User $user_id logged in successfully (session=$session_id)" > /proc/1/fd/1
              ;;
            1)
              echo "[$timestamp] [INFO] [req-$req_id] User $user_id logged out (session=$session_id)" > /proc/1/fd/1
              ;;
            2)
              echo "[$timestamp] [INFO] [req-$req_id] Processing payment for order #ORD-$((100000 + RANDOM % 900000)) (amount=$((10 + RANDOM % 990)).$((RANDOM % 100)))" > /proc/1/fd/1
              ;;
            3)
              echo "[$timestamp] [WARN] [req-$req_id] Slow database query detected (duration=430ms): SELECT * FROM orders WHERE user_id=$user_id" > /proc/1/fd/1
              ;;
            4)
              echo "[$timestamp] [INFO] [req-$req_id] File upload completed: user-$user_id-profile.jpg (size=$((RANDOM % 10000))KB)" > /proc/1/fd/1
              ;;
            5)
              echo "[$timestamp] [ERROR] [req-$req_id] Failed to connect to payment gateway: Connection timed out" > /proc/1/fd/1
              ;;
            6)
              echo "[$timestamp] [INFO] [req-$req_id] New account created: user$user_id@example.com" > /proc/1/fd/1
              ;;
            7)
              echo "[$timestamp] [INFO] [req-$req_id] User $user_id updated profile information" > /proc/1/fd/1
              ;;
            8)
              echo "[$timestamp] [DEBUG] [req-$req_id] Cache hit for product catalog (key=products:featured)" > /proc/1/fd/1
              ;;
            9)
              echo "[$timestamp] [DEBUG] [req-$req_id] Cache miss for user profile (key=user:$user_id)" > /proc/1/fd/1
              ;;
            10)
              echo "[$timestamp] [INFO] [req-$req_id] Order #ORD-$((100000 + RANDOM % 900000)) shipped to tracking number TRK-$((RANDOM % 1000000))" > /proc/1/fd/1
              ;;
            11)
              echo "[$timestamp] [WARN] [req-$req_id] Rate limit reached for IP 192.168.$((RANDOM % 255)).$((RANDOM % 255)) (limit=100/min)" > /proc/1/fd/1
              ;;
            12)
              echo "[$timestamp] [INFO] [req-$req_id] User $user_id changed password" > /proc/1/fd/1
              ;;
            13)
              echo "[$timestamp] [ERROR] [req-$req_id] Database query failed: ERROR: relation \"orders\" does not exist" > /proc/1/fd/1
              ;;
            14)
              echo "[$timestamp] [INFO] [req-$req_id] API request received: GET /api/v1/products?category=electronics" > /proc/1/fd/1
              ;;
            15)
              echo "[$timestamp] [INFO] [req-$req_id] Search performed: \"smartphone\" (results=42)" > /proc/1/fd/1
              ;;
            16)
              echo "[$timestamp] [INFO] [req-$req_id] Email notification sent to user$user_id@example.com" > /proc/1/fd/1
              ;;
            17)
              echo "[$timestamp] [WARN] [req-$req_id] High CPU usage detected: $((70 + RANDOM % 30))%" > /proc/1/fd/1
              ;;
            18)
              echo "[$timestamp] [INFO] [req-$req_id] User $user_id added item PRD-$((10000 + RANDOM % 90000)) to cart" > /proc/1/fd/1
              ;;
            19)
              echo "[$timestamp] [INFO] [req-$req_id] API request completed in $((RANDOM % 1000))ms (endpoint=/api/v1/users/$user_id)" > /proc/1/fd/1
              ;;
          esac
        done
        
        # Continuous logging
        while true; do
          for i in $(seq 1 20); do
            user_id=$((1000 + RANDOM % 9000))
            session_id=$(tr -dc "a-f0-9" < /dev/urandom | head -c 16)
            req_id=$(tr -dc "a-f0-9" < /dev/urandom | head -c 8)
            timestamp=$(date +"%Y-%m-%d %H:%M:%S.%3N")
            
            case $((RANDOM % 20)) in
              0)
                echo "[$timestamp] [INFO] [req-$req_id] User $user_id logged in successfully (session=$session_id)" > /proc/1/fd/1
                ;;
              1)
                echo "[$timestamp] [INFO] [req-$req_id] User $user_id logged out (session=$session_id)" > /proc/1/fd/1
                ;;
              2)
                echo "[$timestamp] [INFO] [req-$req_id] Processing payment for order #ORD-$((100000 + RANDOM % 900000)) (amount=$((10 + RANDOM % 990)).$((RANDOM % 100)))" > /proc/1/fd/1
                ;;
              3)
                echo "[$timestamp] [WARN] [req-$req_id] Slow database query detected (duration=$((300 + RANDOM % 700))ms): SELECT * FROM orders WHERE user_id=$user_id" > /proc/1/fd/1
                ;;
              4)
                echo "[$timestamp] [INFO] [req-$req_id] File upload completed: user-$user_id-profile.jpg (size=$((RANDOM % 10000))KB)" > /proc/1/fd/1
                ;;
              5)
                echo "[$timestamp] [ERROR] [req-$req_id] Failed to connect to payment gateway: Connection timed out" > /proc/1/fd/1
                ;;
              6)
                echo "[$timestamp] [INFO] [req-$req_id] New account created: user$user_id@example.com" > /proc/1/fd/1
                ;;
              7)
                echo "[$timestamp] [INFO] [req-$req_id] User $user_id updated profile information" > /proc/1/fd/1
                ;;
              8)
                echo "[$timestamp] [DEBUG] [req-$req_id] Cache hit for product catalog (key=products:featured)" > /proc/1/fd/1
                ;;
              9)
                echo "[$timestamp] [DEBUG] [req-$req_id] Cache miss for user profile (key=user:$user_id)" > /proc/1/fd/1
                ;;
              10)
                echo "[$timestamp] [INFO] [req-$req_id] Order #ORD-$((100000 + RANDOM % 900000)) shipped to tracking number TRK-$((RANDOM % 1000000))" > /proc/1/fd/1
                ;;
              11)
                echo "[$timestamp] [WARN] [req-$req_id] Rate limit reached for IP 192.168.$((RANDOM % 255)).$((RANDOM % 255)) (limit=100/min)" > /proc/1/fd/1
                ;;
              12)
                echo "[$timestamp] [INFO] [req-$req_id] User $user_id changed password" > /proc/1/fd/1
                ;;
              13)
                echo "[$timestamp] [ERROR] [req-$req_id] Database query failed: ERROR: relation \"orders\" does not exist" > /proc/1/fd/1
                ;;
              14)
                echo "[$timestamp] [INFO] [req-$req_id] API request received: GET /api/v1/products?category=electronics" > /proc/1/fd/1
                ;;
              15)
                echo "[$timestamp] [INFO] [req-$req_id] Search performed: \"smartphone\" (results=$((RANDOM % 100)))" > /proc/1/fd/1
                ;;
              16)
                echo "[$timestamp] [INFO] [req-$req_id] Email notification sent to user$user_id@example.com" > /proc/1/fd/1
                ;;
              17)
                echo "[$timestamp] [WARN] [req-$req_id] High CPU usage detected: $((70 + RANDOM % 30))%" > /proc/1/fd/1
                ;;
              18)
                echo "[$timestamp] [INFO] [req-$req_id] User $user_id added item PRD-$((10000 + RANDOM % 90000)) to cart" > /proc/1/fd/1
                ;;
              19)
                echo "[$timestamp] [INFO] [req-$req_id] API request completed in $((RANDOM % 1000))ms (endpoint=/api/v1/users/$user_id)" > /proc/1/fd/1
                ;;
            esac
          done
          sleep 0.1;
        done
      '
